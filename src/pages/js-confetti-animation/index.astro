---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create Animations with JavaScript and Tailwind CSS",
  description: "Learn to build animation components using JavaScript and Tailwind CSS. Includes CSS transitions and keyframes.",
  canonical: "/js-confetti-animation",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create Animations with JavaScript and Tailwind CSS",
      description: "Learn to build animation components using JavaScript and Tailwind CSS. Includes CSS transitions and keyframes.",
      url: "/js-confetti-animation",
      datePublished: "2025-10-01T06:22:29.076Z",
      dateModified: "2025-10-01T06:22:29.076Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Animation","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create Animations with JavaScript and Tailwind CSS", url: "/js-confetti-animation" },
    ]),
    generateHowToSchema({
      name: "How to Create Animations with JavaScript and Tailwind CSS",
      description: "Learn to build animation components using JavaScript and Tailwind CSS. Includes CSS transitions and keyframes.",
      totalTime: "PT15M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base animation container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Create Animations with JavaScript and Tailwind CSS</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-confetti-animation-with-tailwind-css-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-confetti-animation/index.astro"
    />
    <Wrapper class="py-24 lg:py-62">
      <div class="w-full max-w-sm mx-auto m">
        <!-- Starts component -->
        <button
          id="confettiButton"
          class="w-full h-12 px-8 py-2 text-sm font-semibold text-white rounded-full bg-accent-600 hover:bg-accent-500 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
        >
          Celebrate!
        </button>
        <canvas
          id="confettiCanvas"
          class="fixed top-0 left-0 w-full h-full pointer-events-none"></canvas>
        <!-- Ends component -->
      </div>
    </Wrapper>
   
  </section>
</BaseLayout>
<script type="module">
  const canvas = document.getElementById("confettiCanvas");
  const ctx = canvas.getContext("2d");
  const confettiButton = document.getElementById("confettiButton");
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  const confettiColors = [
    "#5cffe4",
    "#a9ff03",
    "#fd02d1",
    "#1e1e59",
    "#9645f6",
  ];
  const confettiCount = 200;
  const gravity = 0.5;
  const terminalVelocity = 5;
  const drag = 0.075;
  const confettis = [];
  class Confetti {
    constructor(color) {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height - canvas.height;
      this.w = Math.random() * 10 + 5;
      this.h = Math.random() * 5 + 5;
      this.color = color;
      this.dx = Math.random() * 5 - 2.5;
      this.dy = Math.random() * -5 - 5;
    }
    update() {
      this.dy += gravity;
      this.x += this.dx;
      this.y += this.dy;
      if (this.y + this.h > canvas.height) {
        this.dy *= -drag;
        this.y = canvas.height - this.h;
      }
      if (this.x + this.w > canvas.width || this.x < 0) {
        this.dx *= -1;
      }
    }
    draw() {
      ctx.fillStyle = this.color;
      ctx.fillRect(this.x, this.y, this.w, this.h);
    }
  }
  function createConfettis() {
    for (let i = 0; i < confettiCount; i++) {
      confettis.push(
        new Confetti(
          confettiColors[Math.floor(Math.random() * confettiColors.length)]
        )
      );
    }
  }
  function animate() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    confettis.forEach((confetti, index) => {
      confetti.update();
      confetti.draw();
      if (confetti.y > canvas.height) {
        confettis.splice(index, 1);
      }
    });
    if (confettis.length > 0) {
      requestAnimationFrame(animate);
    }
  }
  confettiButton.addEventListener("click", () => {
    createConfettis();
    animate();
  });
  window.addEventListener("resize", () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  });
</script>
