---
import BaseLayout from "@/layouts/BaseLayout.astro";
---

<BaseLayout>
  <section
    class="bg-white relative overflow-hidden"
    x-data="{ isOpen: false }">
    <div
      class="w-full mx-auto 2xl:max-w-7xl flex flex-col justify-center py-24 relative p-8">
      <div
        class="prose text-gray-500 prose-sm prose-headings:font-normal prose-headings:text-xl mx-auto max-w-sm w-full">
        <div>
          <h1>Simple search</h1>
          <p class="text-balance">Search for the words you are looking for.</p>
        </div>
      </div>
      <div class="mt-6 border-t  border-neutral-200  pt-12 max-w-sm mx-auto w-full">
        <!-- Starts component -->

        <div id="search-component">
          <!-- Search Input -->
          <input
            type="text"
            id="search-input"
            placeholder="Search..."
            class="w-full border-gray-300 rounded-md placeholder-gray-400 text-sm focus:border-orange-500 focus:ring-orange-500"
          />

          <!-- Filtered Items -->
          <ul
            id="items-list"
            class="mt-12 text-sm space-y-2 text-gray-500 list-disc list-inside">
            <!-- List items will be injected here by JavaScript -->
          </ul>
        </div>

        <!-- Ends component -->
        <!-- Starts links to tutorial -->
        <div
          class="pointer-events-none fixed inset-x-0 bottom-0 sm:flex sm:justify-center p-2">
          <div
            class="pointer-events-auto flex w-full max-w-md divide-x divide-neutral-200 rounded-lg bg-white shadow-xl border border-neutral-200">
            <div class="flex w-0 flex-1 items-center p-4">
              <div class="w-full">
                <p class="text-sm font-medium text-neutral-900">Tutorial</p>
                <p class="mt-1 text-sm text-neutral-500">
                  How to create a search input with Tailwind CSS and JavaScript
                </p>
                <p class="mt-2 text-xs text-orange-500 underline">
                  <a href="https://lexingtonthemes.com">
                    by © Lexington Themes</a
                  >
                </p>
              </div>
            </div>
            <div class="flex">
              <div class="flex flex-col divide-y divide-neutral-200">
                <div class="flex h-0 flex-1">
                  <a
                    href="https://lexingtonthemes.com/tutorials/how-to-create-a-search-input-with-tailwind-css-and-javascript/"
                    type="button"
                    class="flex w-full items-center justify-center rounded-none rounded-tr-lg px-4 py-3 text-sm font-medium text-orange-600 hover:text-orange-500 focus:z-10 focus:outline-none focus:ring-2 focus:ring-orange-500"
                    >Tutorial</a
                  >
                </div>
                <div class="flex h-0 flex-1">
                  <a
                    href="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-search/index.astro"
                    class="flex w-full items-center justify-center rounded-none rounded-br-lg  px-4 py-3 text-sm font-medium text-neutral-700 hover:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-orange-500"
                    >Get the code</a
                  >
                </div>
              </div>
            </div>
          </div>
        </div>
        <!-- Ends links to tutorial -->
      </div>
    </div>
  </section>
</BaseLayout>

<script type="module">
  document.addEventListener("DOMContentLoaded", function () {
    const searchComponent = document.getElementById("search-component");
    const searchInput = document.getElementById("search-input");
    const itemsList = document.getElementById("items-list");

    const items = [
      "Milano",
      "Alicante",
      "Switzerland",
      "Bilbao",
      "Åland Islands",
      "Stockholm",
      "Torrevieja",
      "Minneapolis",
    ];

    function renderItems(filter = "") {
      itemsList.innerHTML = "";
      const filteredItems = items.filter((item) =>
        item.toLowerCase().includes(filter.toLowerCase())
      );
      filteredItems.forEach((item) => {
        const li = document.createElement("li");
        li.textContent = item;
        itemsList.appendChild(li);
      });
    }

    searchInput.addEventListener("input", function () {
      renderItems(searchInput.value);
    });

    // Initial render
    renderItems();
  });
</script>
