---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "Create a Shopping Cart with Alpine.js",
  description: "Learn to build shopping cart components using Alpine.js and Tailwind CSS. Includes item management and quantity controls.",
  canonical: "/cart",
  jsonLd: [
    generateArticleSchema({
      title: "Create a Shopping Cart with Alpine.js",
      description: "Learn to build shopping cart components using Alpine.js and Tailwind CSS. Includes item management and quantity controls.",
      url: "/cart",
      datePublished: "2025-10-01T06:22:29.069Z",
      dateModified: "2025-10-01T06:22:29.069Z",
      keywords: ["Tailwind CSS","Alpine.js","Shopping Cart","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "Create a Shopping Cart with Alpine.js", url: "/cart" },
    ]),
    generateHowToSchema({
      name: "Create a Shopping Cart with Alpine.js",
      description: "Learn to build shopping cart components using Alpine.js and Tailwind CSS. Includes item management and quantity controls.",
      totalTime: "PT25M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base shopping cart container and elements"
            },
            {
                  "name": "Add Alpine.js interactivity",
                  "text": "Initialize Alpine.js to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section x-data="{ isOpen: false }">
  <h1 class="sr-only">Create a Shopping Cart with Alpine.js</h1>

    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-add-item-to-your-cart-with-tailwind-css-and-alpinejs/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/cart/index.astro"
    />
    <Wrapper class="py-24 lg:py-48">
      <!-- Starts component -->
      <div
        class="max-w-xs mx-auto"
        x-data="{
      cart: [],
      products: [
          { id: 1, name: 'Tomatoes', price: 10 },
          // Add more products here
      ],
      addToCart(product) {
          let existingItem = this.cart.find(item => item.id === product.id);
          if (existingItem) {
              existingItem.quantity++;
          } else {
              this.cart.push({ ...product, quantity: 1 });
          }
      },
      removeFromCart(index) {
          this.cart.splice(index, 1);
      },
      increaseQuantity(index) {
          this.cart[index].quantity++;
      },
      decreaseQuantity(index) {
          if (this.cart[index].quantity > 1) {
              this.cart[index].quantity--;
          } else {
              this.removeFromCart(index);
          }
      },
      totalPrice() {
          return this.cart.reduce((total, item) => total + item.price * item.quantity, 0);
      }
  }"
      >
        <!-- Product List -->
        <ul>
          <template x-for="product in products" :key="product.id">
            <li class="flex flex-col gap-4">
              <div>
                <span x-text="product.name"></span> - <span
                  x-text="'$' + product.price"></span>
              </div>
              <button
                @click="addToCart(product)"
                class="h-12 px-8 py-2 text-sm font-semibold rounded-full bg-accent-50 text-accent-600 hover:bg-accent-100 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
                >Add to Cart</button
              >
            </li>
          </template>
        </ul>

        <!-- Cart -->
        <div
          class="w-full max-w-sm pt-6 mx-auto mt-6 border-t prose text-base-500 prose-sm prose-headings:font-normal border-base-200 prose-headings:text-xl"
        >
          <h4>Your items</h4>
          <ul>
            <template x-for="(item, index) in cart" :key="index">
              <li>
                <span x-text="`${item.name} x${item.quantity}`"></span> - $<span
                  x-text="item.price * item.quantity"
                  class="mr-4"></span>
                <button
                  @click="increaseQuantity(index)"
                  class="px-3 py-1 text-sm font-semibold bg-base-100 rounded-md text-base-800 hover:bg-base-300 focus:outline-none focus:ring-2 focus:ring-base-500 focus:ring-offset-2"
                  >+</button
                >
                <button
                  @click="decreaseQuantity(index)"
                  class="px-3 py-1 text-sm font-semibold bg-base-100 rounded-md text-base-800 hover:bg-base-300 focus:outline-none focus:ring-2 focus:ring-base-500 focus:ring-offset-2"
                  >-</button
                >
                <button
                  @click="removeFromCart(index)"
                  class="px-3 py-1 text-sm font-semibold bg-base-200 rounded-md text-base-800 hover:bg-base-300 focus:outline-none focus:ring-2 focus:ring-base-500 focus:ring-offset-2"
                  >Remove</button
                >
              </li>
            </template>
          </ul>
          <div>Total Price: $<span x-text="totalPrice()"></span></div>
        </div>
      </div>
    </Wrapper>
  </section>
</BaseLayout>
