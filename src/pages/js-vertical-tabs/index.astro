---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create Tabs with JavaScript and Tailwind CSS",
  description: "Learn to build tabs components using JavaScript and Tailwind CSS. Includes keyboard navigation and persistent state.",
  canonical: "/js-vertical-tabs",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create Tabs with JavaScript and Tailwind CSS",
      description: "Learn to build tabs components using JavaScript and Tailwind CSS. Includes keyboard navigation and persistent state.",
      url: "/js-vertical-tabs",
      datePublished: "2025-10-01T06:22:29.082Z",
      dateModified: "2025-10-01T06:22:29.082Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Tabs","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create Tabs with JavaScript and Tailwind CSS", url: "/js-vertical-tabs" },
    ]),
    generateHowToSchema({
      name: "How to Create Tabs with JavaScript and Tailwind CSS",
      description: "Learn to build tabs components using JavaScript and Tailwind CSS. Includes keyboard navigation and persistent state.",
      totalTime: "PT15M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base tabs container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Create Tabs with JavaScript and Tailwind CSS</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-vertical-tabs-with-tailwind-css-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-vertical-tabs/index.astro"
    />
    <!-- Ends links to tutorial -->
    <Wrapper class="py-32 lg:py-48">
      <!-- Starts component -->
      <div class="items-center grid grid-cols-1 md:grid-cols-2 gap-8">
        <ul class="flex flex-col items-center h-full gap-2">
          <li class="flex w-full">
            <a
              id="tab1"
              href="#tab1"
              class="w-full px-4 py-3 text-sm border text-base-400 rounded-md border-base-100"
            >
              Tab 1
            </a>
          </li>
          <li class="flex w-full">
            <a
              id="tab2"
              href="#tab2"
              class="w-full px-4 py-3 text-sm border text-base-400 rounded-md border-base-100"
            >
              Tab 2
            </a>
          </li>
          <li class="flex w-full">
            <a
              id="tab3"
              href="#tab3"
              class="w-full px-4 py-3 text-sm border text-base-400 rounded-md border-base-100"
            >
              Tab 3
            </a>
          </li>
          <li class="flex w-full">
            <a
              id="tab4"
              href="#tab4"
              class="w-full px-4 py-3 text-sm border text-base-400 rounded-md border-base-100"
            >
              Tab 4
            </a>
          </li>
        </ul>
        <div class="h-full overflow-hidden">
          <section
            id="tab1-content"
            class="h-full p-8 tab-content bg-accent-50 rounded-xl"
          >
            <p class="text-sm text-accent-400">Content for tab 1</p>
          </section>
          <section
            id="tab2-content"
            class="hidden h-full p-8 tab-content bg-accent-200 rounded-xl"
          >
            <p class="text-sm text-accent-800">Content for tab 2</p>
          </section>
          <section
            id="tab3-content"
            class="hidden h-full p-8 tab-content bg-accent-400 rounded-xl"
          >
            <p class="text-sm text-white">Content for tab 3</p>
          </section>
          <section
            id="tab4-content"
            class="hidden h-full p-8 tab-content bg-accent-600 rounded-xl"
          >
            <p class="text-sm text-white">Content for tab 4</p>
          </section>
        </div>
      </div>
      <!-- Ends component -->
    </Wrapper>
  </section>
</BaseLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const allLinks = document.querySelectorAll("a");
    const allTabs = document.querySelectorAll(".tab-content");

    const switchTab = (linkId) => {
      allTabs.forEach((tab) => {
        tab.classList.toggle("hidden", tab.id !== `${linkId}-content`);
      });
    };

    const handleTabClick = (event) => {
      event.preventDefault();
      const linkId = event.target.id;
      allLinks.forEach((link) => {
        const isCurrentLink = link.id === linkId;
        link.classList.toggle("bg-base-100", isCurrentLink);
        link.classList.toggle("text-accent-600", isCurrentLink);
        link.classList.toggle("text-base-400", !isCurrentLink);
      });
      switchTab(linkId);
    };

    allLinks.forEach((link) => {
      link.addEventListener("click", handleTabClick);
    });

    const currentHash = window.location.hash;
    const activeLink = currentHash
      ? document.querySelector(`a[href="${currentHash}"]`)
      : document.querySelector("a");
    handleTabClick({ target: activeLink });
  });
</script>
