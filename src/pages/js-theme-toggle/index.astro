---
// Fundations
import BaseLayout from "@/layouts/BaseLayout.astro";
import Button from "@/components/fundations/elements/Button.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";
// SEO Configuration
const seoConfig = {
  title: "Create Js Theme Toggle with Tailwind CSS",
  description: "Learn to build js theme toggle components using Tailwind CSS. Includes responsive design and modern styling.",
  canonical: "/js-theme-toggle",
  jsonLd: [
    generateArticleSchema({
      title: "Create Js Theme Toggle with Tailwind CSS",
      description: "Learn to build js theme toggle components using Tailwind CSS. Includes responsive design and modern styling.",
      url: "/js-theme-toggle",
      datePublished: "2025-10-01T06:26:58.392Z",
      dateModified: "2025-10-01T06:26:58.392Z",
      keywords: ["Tailwind CSS","Js Theme Toggle","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "Create Js Theme Toggle with Tailwind CSS", url: "/js-theme-toggle" },
    ]),
    generateHowToSchema({
      name: "Create Js Theme Toggle with Tailwind CSS",
      description: "Learn to build js theme toggle components using Tailwind CSS. Includes responsive design and modern styling.",
      totalTime: "PT20M",
      steps: [
        { name: "Set up HTML structure", text: "Create the base component container and elements" },
        { name: "Add interactivity", text: "Initialize state management and event handlers" },
        { name: "Style with Tailwind CSS", text: "Apply utility classes for responsive layout" },
        { name: "Add accessibility features", text: "Implement ARIA attributes and keyboard navigation" },
        { name: "Test the component", text: "Verify functionality across browsers and devices" },
      ],
    }),
  ],
};

const milestones = [
  {
    date: "August 2021",
    title: "Company Inception",
    description: "The company was born out of a vision to innovate. ",
  },
  {
    date: "December 2021",
    title: "Achieved $65 Million Funding",
    description:
      "In an affirmation of our potential and promise, we secured a substantial funding of $65 million. ",
  },
  {
    date: "February 2022",
    title: "Beta Version Launch",
    description:
      "Marking a significant step forward, we released the beta version of our product. ",
  },
  {
    date: "December 2022",
    title: "Product's Global Rollout",
    description:
      "The culmination of our efforts and dedication led to the global launch of our product. ",
  },
];
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">Create Js Theme Toggle with Tailwind CSS</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-theme-toggle-with-tailwind-css-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-theme-toggle/index.astro"
    />
    <!-- Ends links to tutorial -->
    <Wrapper class="py-24 bg-white dark:bg-base-800">
      <!-- Dark Mode Class -->
      <div class="p-8 bg-base-100 dark:bg-base-600 rounded-2xl duration-300">
        <!-- Your content here -->
        <div
          class="mx-auto overflow-hidden grid grid-cols-1 gap-8 lg:mx-0 lg:grid-cols-4"
        >
          <!-- Replace with your milestones content dynamically -->
          {
            milestones.map((milestone) => (
              <div>
                <time
                  datetime={milestone.date}
                  class="flex items-center text-sm font-semibold leading-6 text-accent-600 dark:text-accent-400"
                >
                  <svg
                    viewBox="0 0 4 4"
                    class="flex-none w-1 h-1 mr-4"
                    aria-hidden="true"
                  >
                    <circle cx="2" cy="2" r="2" fill="currentColor" />
                  </svg>

                  {new Date(milestone.date).toLocaleString("default", {
                    month: "short",
                    year: "numeric",
                  })}
                  <div
                    class="absolute w-screen h-px -ml-2 -translate-x-full bg-base-900/10 dark:bg-base-500 sm:-ml-4 lg:static lg:-mr-6 lg:ml-8 lg:w-auto lg:flex-auto lg:translate-x-0"
                    aria-hidden="true"
                  />
                </time>
                <p class="mt-6 text-lg font-semibold tracking-tight leading-8 text-base-900 dark:text-white">
                  {milestone.title}
                </p>
                <p class="mt-1 text-sm text-pretty leading-7 text-base-500 dark:text-base-300">
                  {milestone.description}
                </p>
              </div>
            ))
          }
          <!-- Repeat for other milestones -->
        </div>
      </div>
      <!-- Dark Mode Toggle -->

      <Button
        size="sm"
        variant="accent"
        id="dark-mode-toggle"
        class="mx-auto mt-12"
      >
        Toggle <Button />
      </Button>
    </Wrapper>

    <script type="module">
      document.addEventListener("DOMContentLoaded", () => {
        const toggleButton = document.getElementById("dark-mode-toggle");
        const html = document.documentElement;

        // Load persisted theme
        if (localStorage.getItem("theme") === "dark") {
          html.classList.add("dark");
        }

        toggleButton.addEventListener("click", () => {
          const isDark = html.classList.toggle("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
      });
    </script>
  </section>
</BaseLayout>
