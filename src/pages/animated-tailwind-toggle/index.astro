---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create a Toggle with Tailwind CSS and Tailwind CSS",
  description: "Learn to build toggle components using Tailwind CSS and Tailwind CSS. Includes smooth animations and state management.",
  canonical: "/animated-tailwind-toggle",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create a Toggle with Tailwind CSS and Tailwind CSS",
      description: "Learn to build toggle components using Tailwind CSS and Tailwind CSS. Includes smooth animations and state management.",
      url: "/animated-tailwind-toggle",
      datePublished: "2025-10-01T06:22:29.067Z",
      dateModified: "2025-10-01T06:22:29.067Z",
      keywords: ["Tailwind CSS","Toggle","Tutorial","Web Development","Animation"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create a Toggle with Tailwind CSS and Tailwind CSS", url: "/animated-tailwind-toggle" },
    ]),
    generateHowToSchema({
      name: "How to Create a Toggle with Tailwind CSS and Tailwind CSS",
      description: "Learn to build toggle components using Tailwind CSS and Tailwind CSS. Includes smooth animations and state management.",
      totalTime: "PT10M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base toggle container and elements"
            },
            {
                  "name": "Add Tailwind CSS interactivity",
                  "text": "Initialize Tailwind CSS to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Create a Toggle with Tailwind CSS and Tailwind CSS</h1>

    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-an-animated-toggle-with-tailwind-css/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/animated-tailwind-toggle/index.astro"
    />
    <Wrapper class="py-24 lg:py-62">
      <!-- Starts component -->
      <div class="flex w-full max-w-sm mx-auto">
        <label
          for="theme-toggle"
          class="relative flex items-center w-24 h-12 mx-auto rounded-full shadow cursor-pointer bg-zinc-100 ring-1 ring-inset ring-white"
        >
          <span class="sr-only">Toggle theme</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="absolute left-[0.5em] top-1/2 flex size-8 -translate-y-1/2 items-center justify-center text-accent-600"
            aria-hidden="true"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M12 12m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0"></path>
            <path
              d="M3 12h1m8 -9v1m8 8h1m-9 8v1m-6.4 -15.4l.7 .7m12.1 -.7l-.7 .7m0 11.4l.7 .7m-12.1 -.7l-.7 .7"
            ></path>
          </svg>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="absolute right-[0.5em] top-1/2 size-8 -translate-y-1/2 rounded-full text-accent-600"
            aria-hidden="true"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path
              d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z"
            ></path>
          </svg>
          <input
            class="sr-only peer"
            id="theme-toggle"
            name="theme-toggle"
            type="checkbox"
            aria-labelledby="theme-toggle-label"
          />
          <span
            id="theme-toggle-label"
            class="absolute left-[0.25em] top-1/2 flex size-10 -translate-y-1/2 items-center justify-center rounded-full bg-accent-600 to-zinc-400 transition-all duration-300 peer-checked:left-[calc(100%-2.75em)] peer-focus:ring-2 peer-focus:ring-accent-400"
            aria-hidden="true"></span>
        </label>
      </div>
      <!-- Ends component -->
    </Wrapper>
  </section>
</BaseLayout>
