---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create Tabs with Alpine.js and Tailwind CSS",
  description: "Learn to build tabs components using Alpine.js and Tailwind CSS. Includes keyboard navigation and persistent state.",
  canonical: "/alpine-persistent-tabs",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create Tabs with Alpine.js and Tailwind CSS",
      description: "Learn to build tabs components using Alpine.js and Tailwind CSS. Includes keyboard navigation and persistent state.",
      url: "/alpine-persistent-tabs",
      datePublished: "2025-10-01T06:22:29.064Z",
      dateModified: "2025-10-01T06:22:29.064Z",
      keywords: ["Tailwind CSS","Alpine.js","Tabs","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create Tabs with Alpine.js and Tailwind CSS", url: "/alpine-persistent-tabs" },
    ]),
    generateHowToSchema({
      name: "How to Create Tabs with Alpine.js and Tailwind CSS",
      description: "Learn to build tabs components using Alpine.js and Tailwind CSS. Includes keyboard navigation and persistent state.",
      totalTime: "PT15M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base tabs container and elements"
            },
            {
                  "name": "Add Alpine.js interactivity",
                  "text": "Initialize Alpine.js to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Create Tabs with Alpine.js and Tailwind CSS</h1>

    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-persistent-tabs-with-tailwind-css-and-alpinejs"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/alpine-persistent-tabs/index.astro"
    />
    <Wrapper class="py-24 lg:py-62">
      <!-- Starts component -->
      <div
        x-data="{
    activeTab: parseInt(localStorage.getItem('activeTab')) || 0,
    setActiveTab(index) {
      this.activeTab = index;
      localStorage.setItem('activeTab', index.toString());
    }
  }"
        class="w-full max-w-lg mx-auto"
      >
        <!-- Tab List -->
        <ul
          role="tablist"
          class="flex items-stretch -mb-px gap-2 text-base-500"
        >
          <!-- Tab 1 -->
          <li role="presentation">
            <button
              @click="setActiveTab(0)"
              :aria-selected="activeTab === 0"
              :tabindex="activeTab === 0 ? 0 : -1"
              :class="{ 'bg-accent-50 text-accent-600': activeTab === 0 }"
              class="flex items-center h-8 px-4 py-2 text-xs font-medium rounded-full gap-2 focus:outline-none focus:ring-2 focus:ring-accent-500"
              role="tab"
              id="tab-1"
              aria-controls="panel-1"
            >
              My account
            </button>
          </li>
          <!-- Tab 2 -->
          <li role="presentation">
            <button
              @click="setActiveTab(1)"
              :aria-selected="activeTab === 1"
              :tabindex="activeTab === 1 ? 0 : -1"
              :class="{ 'bg-accent-50 text-accent-600': activeTab === 1 }"
              class="flex items-center h-8 px-4 py-2 text-xs font-medium rounded-full gap-2 focus:outline-none focus:ring-2 focus:ring-accent-500"
              role="tab"
              id="tab-2"
              aria-controls="panel-2"
            >
              Biling
            </button>
          </li>
        </ul>
        <!-- Panels -->
        <div class="pt-4 mt-4 border-t border-base-200">
          <!-- Panel 1 -->
          <section
            x-show="activeTab === 0"
            role="tabpanel"
            id="panel-1"
            aria-labelledby="tab-1"
          >
            Content 1
          </section>
          <!-- Panel 2 -->
          <section
            x-show="activeTab === 1"
            role="tabpanel"
            id="panel-2"
            aria-labelledby="tab-2"
          >
            Content 2
          </section>
        </div>
      </div>
    </Wrapper>
  </section>
</BaseLayout>
