---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create a Menu with Alpine.js and Tailwind CSS",
  description: "Learn to build menu components using Alpine.js and Tailwind CSS. Includes dropdown functionality and keyboard navigation.",
  canonical: "/contextualmenu",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create a Menu with Alpine.js and Tailwind CSS",
      description: "Learn to build menu components using Alpine.js and Tailwind CSS. Includes dropdown functionality and keyboard navigation.",
      url: "/contextualmenu",
      datePublished: "2025-10-01T06:22:29.070Z",
      dateModified: "2025-10-01T06:22:29.070Z",
      keywords: ["Tailwind CSS","Alpine.js","Menu","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create a Menu with Alpine.js and Tailwind CSS", url: "/contextualmenu" },
    ]),
    generateHowToSchema({
      name: "How to Create a Menu with Alpine.js and Tailwind CSS",
      description: "Learn to build menu components using Alpine.js and Tailwind CSS. Includes dropdown functionality and keyboard navigation.",
      totalTime: "PT15M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base menu container and elements"
            },
            {
                  "name": "Add Alpine.js interactivity",
                  "text": "Initialize Alpine.js to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section x-data="{ isOpen: false }">
  <h1 class="sr-only">How to Create a Menu with Alpine.js and Tailwind CSS</h1>

    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-contextual-menu-with-tailwind-css-and-alpinejs/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/contextualmenu/index.astro"
    />
    <Wrapper class="py-24">
      <!-- Starts component -->
      <div
        class="h-full bg-base-50"
        x-data="{ isOpen: false, position: { x: 0, y: 0 }, areaWidth: 0, areaHeight: 0 }"
        x-init="areaWidth = $refs.area.offsetWidth; areaHeight = $refs.area.offsetHeight"
      >
        <div
          class="flex items-center justify-center h-full p-8 text-sm text-center lg:py-40 text-base-500"
          @contextmenu.prevent="isOpen = true; position = contextMenuPosition($event)"
          @click.away="isOpen = false"
          x-ref="area"
        >
          Right click here
        </div>

        <div
          x-show="isOpen"
          x-transition:enter="transition ease-out duration-100"
          x-transition:enter-start="opacity-0 scale-95"
          x-transition:enter-end="opacity-100 scale-100"
          x-transition:leave="transition ease-in duration-75"
          x-transition:leave-start="opacity-100 scale-100"
          x-transition:leave-end="opacity-0 scale-95"
          x-style="`top: ${Math.min(position.y, areaHeight - $refs.menu.offsetHeight)}px; left: ${Math.min(position.x, areaWidth - $refs.menu.offsetWidth)}px;`"
          @click.away="isOpen = false"
          class="absolute z-50 p-2 bg-white shadow-lg rounded-md"
          x-ref="menu"
        >
          <ul>
            <li>
              <a
                href="#"
                class="block px-4 py-2 text-base-800 hover:bg-base-200"
                >Menu Item 1</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 text-base-800 hover:bg-base-200"
                >Menu Item 2</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 text-base-800 hover:bg-base-200"
                >Menu Item 3</a
              >
            </li>
          </ul>
        </div>

        <script>
          function contextMenuPosition(event) {
            return {
              x: event.clientX,
              y: event.clientY,
            };
          }
        </script>
      </div>
    </Wrapper>
  </section>
</BaseLayout>
