---
import BaseLayout from "@/layouts/BaseLayout.astro";
---

<BaseLayout>
  <section>
    <div
      class="w-full mx-auto 2xl:max-w-7xl flex flex-col lg:h-svh justify-center py-24 lg:py-96 relative p-8">
      <div
        class="prose text-gray-500 prose-sm prose-headings:font-normal prose-headings:text-xl w-full max-w-lg mx-auto">
        <div>
          <h1>Kanban Board</h1>
          <p class="text-balance">
            Start by adding a task on the to do card, then prss itro or click
            the ADD button
          </p>
        </div>
      </div>
      <!-- Starts component -->
      <div class="container mx-auto p-4 max-w-7xl">
        <div
          class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 mt-24 items-start"
          id="kanban-board">
          <div class="flex flex-col gap-2 bg-gray-50 p-8 rounded-3xl h-full">
            <h2 class="block text-sm text-gray-700">To Do</h2>
            <div
              id="todo"
              class="space-y-2">
            </div>
            <form
              class="mt-4 flex flex-col"
              data-column="todo">
              <input
                type="text"
                class="block w-full h-12 px-4 py-3 placeholder-gray-500 bg-white border border-gray-200 rounded-lg appearance-none text-blue-500 focus:border-blue-500 focus:bg-white focus:outline-none focus:ring-blue-500 focus:ring-inset focus:ring-2 text-xs"
                placeholder="New task..."
              />
              <button
                type="submit"
                class="rounded-full bg-blue-600 px-8 py-2 h-12 text-sm font-semibold text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 w-full mt-2"
                >Add Task</button
              >
            </form>
          </div>
          <div class="flex flex-col gap-2 bg-gray-50 p-8 rounded-3xl h-full">
            <h2 class="block text-sm text-gray-700">In Progress</h2>
            <div
              id="inProgress"
              class="space-y-2">
            </div>
            <form
              class="mt-4 flex flex-col"
              data-column="inProgress">
              <input
                type="text"
                class="block w-full h-12 px-4 py-3 placeholder-gray-500 bg-white border border-gray-200 rounded-lg appearance-none text-blue-500 focus:border-blue-500 focus:bg-white focus:outline-none focus:ring-blue-500 focus:ring-inset focus:ring-2 text-xs"
                placeholder="New task..."
              />
              <button
                type="submit"
                class="rounded-full bg-blue-600 px-8 py-2 h-12 text-sm font-semibold text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 w-full mt-2"
                >Add Task</button
              >
            </form>
          </div>
          <div class="flex flex-col gap-2 bg-gray-50 p-8 rounded-3xl h-full">
            <h2 class="block text-sm text-gray-700">Done</h2>
            <div
              id="done"
              class="space-y-2">
            </div>
            <form
              class="mt-4 flex flex-col"
              data-column="done">
              <input
                type="text"
                class="block w-full h-12 px-4 py-3 placeholder-gray-500 bg-white border border-gray-200 rounded-lg appearance-none text-blue-500 focus:border-blue-500 focus:bg-white focus:outline-none focus:ring-blue-500 focus:ring-inset focus:ring-2 text-xs"
                placeholder="New task..."
              />
              <button
                type="submit"
                class="rounded-full bg-blue-600 px-8 py-2 h-12 text-sm font-semibold text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 w-full mt-2"
                >Add Task</button
              >
            </form>
          </div>
        </div>
      </div>
      <!-- Ends component -->
    </div>
    <!-- Starts links to tutorial -->
    <div
      class="pointer-events-none fixed inset-x-0 bottom-0 sm:flex sm:justify-center p-2">
      <div
        class="pointer-events-auto flex w-full max-w-md divide-x divide-neutral-200 rounded-lg bg-white shadow-xl border">
        <div class="flex w-0 flex-1 items-center p-4">
          <div class="w-full">
            <p class="text-sm font-medium text-neutral-900">Tutorial</p>
            <p class="mt-1 text-sm text-neutral-500">
              How to create a basic Kanban board with Tailwind CSS and
              JavaScript
            </p>
            <p class="mt-2 text-xs text-orange-500 underline">
              <a href="https://lexingtonthemes.com"> by Â© Lexington Themes</a>
            </p>
          </div>
        </div>
        <div class="flex">
          <div class="flex flex-col divide-y divide-neutral-200">
            <div class="flex h-0 flex-1">
              <a
                href="https://lexingtonthemes.com/tutorials/how-to-create-a-basic-kanban-board-with-tailwind-css-and-javascript/"
                type="button"
                class="flex w-full items-center justify-center rounded-none rounded-tr-lg border border-transparent px-4 py-3 text-sm font-medium text-orange-600 hover:text-orange-500 focus:z-10 focus:outline-none focus:ring-2 focus:ring-orange-500"
                >Tutorial</a
              >
            </div>
            <div class="flex h-0 flex-1">
              <a
                href="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-kanban-board/index.astro"
                class="flex w-full items-center justify-center rounded-none rounded-br-lg border border-transparent px-4 py-3 text-sm font-medium text-neutral-700 hover:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-orange-500"
                >Get the code</a
              >
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Ends links to tutorial -->
  </section>
  <script type="module">
    const columns = ["todo", "inProgress", "done"];
    let tasks = {
      todo: [],
      inProgress: [],
      done: [],
    };

    // Load tasks from localStorage
    const savedTasks = localStorage.getItem("kanbanTasks");
    if (savedTasks) {
      tasks = JSON.parse(savedTasks);
    }

    function saveTasks() {
      localStorage.setItem("kanbanTasks", JSON.stringify(tasks));
    }

    function renderTasks() {
      columns.forEach((column) => {
        const columnElement = document.getElementById(column);
        columnElement.innerHTML = "";
        tasks[column].forEach((task, index) => {
          const taskElement = document.createElement("div");
          taskElement.className =
            "bg-white p-2 rounded shadow flex justify-between items-center";
          taskElement.innerHTML = `
          <p class="flex-grow">${task}</p>
          <div class="flex items-center space-x-1">
            ${
              column !== "todo"
                ? `<button data-action="move" data-from="${column}" data-to="${
                    columns[columns.indexOf(column) - 1]
                  }" data-index="${index}" class="inline-flex items-center justify-center text-blue-500 hover:text-blue-600 p-1 rounded">
               &larr;
                  </button>`
                : ""
            }
            ${
              column !== "done"
                ? `<button data-action="move" data-from="${column}" data-to="${
                    columns[columns.indexOf(column) + 1]
                  }" data-index="${index}" class="inline-flex items-center justify-center text-green-500 hover:text-green-600 p-1">
                   &rarr;
                  </button>`
                : ""
            }
            <button data-action="delete" data-column="${column}" data-index="${index}" class="inline-flex items-center justify-center text-red-500 hover:text-red-600 p-1">
             &#10540;
            </button>
          </div>
        `;
          columnElement.appendChild(taskElement);
        });
      });
    }

    function addTask(column, task) {
      if (task !== "") {
        tasks[column].push(task);
        renderTasks();
        saveTasks();
      }
    }

    function moveTask(fromColumn, toColumn, taskIndex) {
      const task = tasks[fromColumn].splice(taskIndex, 1)[0];
      tasks[toColumn].push(task);
      renderTasks();
      saveTasks();
    }

    function deleteTask(column, taskIndex) {
      tasks[column].splice(taskIndex, 1);
      renderTasks();
      saveTasks();
    }

    // Event delegation for form submissions
    document.addEventListener("submit", (event) => {
      if (event.target.tagName === "FORM") {
        event.preventDefault();
        const column = event.target.dataset.column;
        const input = event.target.elements[0];
        const task = input.value.trim();
        addTask(column, task);
        input.value = "";
      }
    });

    // Event delegation for move and delete buttons
    document.addEventListener("click", (event) => {
      const button = event.target.closest("button[data-action]");
      if (button) {
        const { action, from, to, column, index } = button.dataset;
        if (action === "move") {
          moveTask(from, to, parseInt(index));
        } else if (action === "delete") {
          deleteTask(column, parseInt(index));
        }
      }
    });

    // Initial render
    renderTasks();
  </script>
</BaseLayout>
