---
// Fundations
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
---

<BaseLayout>
  <section>
    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-basic-kanban-board-with-tailwind-css-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-kanban-board/index.astro"
    />
    <Wrapper class="py-24 lg:py-48">
      <!-- Starts component -->

      <div
        class="items-start mt-24 grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3"
        id="kanban-board"
      >
        <div class="flex flex-col h-full gap-2">
          <h2 class="block text-sm text-base-700">To Do</h2>
          <div id="todo" class="space-y-2"></div>
          <form class="flex flex-col" data-column="todo">
            <input
              type="text"
              class="block w-full h-10 px-4 py-3 text-xs bg-white border rounded-lg appearance-none placeholder-base-500 border-base-200 text-accent-500 focus:border-accent-500 focus:bg-white focus:outline-none focus:ring-accent-500 focus:ring-inset focus:ring-2"
              placeholder="New task..."
            />
            <button
              type="submit"
              class="w-full h-10 px-8 py-2 mt-2 text-sm font-semibold text-white rounded-full bg-accent-600 hover:bg-accent-500 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
              >Add Task</button
            >
          </form>
        </div>
        <div class="flex flex-col h-full gap-2">
          <h2 class="block text-sm text-base-700">In Progress</h2>
          <div id="inProgress" class="space-y-2"></div>
          <form class="flex flex-col" data-column="inProgress">
            <input
              type="text"
              class="block w-full h-10 px-4 py-3 text-xs bg-white border rounded-lg appearance-none placeholder-base-500 border-base-200 text-accent-500 focus:border-accent-500 focus:bg-white focus:outline-none focus:ring-accent-500 focus:ring-inset focus:ring-2"
              placeholder="New task..."
            />
            <button
              type="submit"
              class="w-full h-10 px-8 py-2 mt-2 text-sm font-semibold text-white rounded-full bg-accent-600 hover:bg-accent-500 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
              >Add Task</button
            >
          </form>
        </div>
        <div class="flex flex-col h-full gap-2">
          <h2 class="block text-sm text-base-700">Done</h2>
          <div id="done" class="space-y-2"></div>
          <form class="flex flex-col" data-column="done">
            <input
              type="text"
              class="block w-full h-10 px-4 py-3 text-xs bg-white border rounded-lg appearance-none placeholder-base-500 border-base-200 text-accent-500 focus:border-accent-500 focus:bg-white focus:outline-none focus:ring-accent-500 focus:ring-inset focus:ring-2"
              placeholder="New task..."
            />
            <button
              type="submit"
              class="w-full h-10 px-8 py-2 mt-2 text-sm font-semibold text-white rounded-full bg-accent-600 hover:bg-accent-500 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
              >Add Task</button
            >
          </form>
        </div>
      </div>
    </Wrapper>
  </section>
  <script type="module">
    const columns = ["todo", "inProgress", "done"];
    let tasks = {
      todo: [],
      inProgress: [],
      done: [],
    };

    // Load tasks from localStorage
    const savedTasks = localStorage.getItem("kanbanTasks");
    if (savedTasks) {
      tasks = JSON.parse(savedTasks);
    }

    function saveTasks() {
      localStorage.setItem("kanbanTasks", JSON.stringify(tasks));
    }

    function renderTasks() {
      columns.forEach((column) => {
        const columnElement = document.getElementById(column);
        columnElement.innerHTML = "";
        tasks[column].forEach((task, index) => {
          const taskElement = document.createElement("div");
          taskElement.className =
            "flex items-center justify-between p-2 bg-white rounded shadow";
          taskElement.innerHTML = `
          <p class="flex-grow">${task}</p>
          <div class="flex items-center space-x-1">
            ${
              column !== "todo"
                ? `<button data-action="move" data-from="${column}" data-to="${
                    columns[columns.indexOf(column) - 1]
                  }" data-index="${index}" class="inline-flex items-center justify-center p-1 rounded text-accent-500 hover:text-accent-600">
               &larr;
                  </button>`
                : ""
            }
            ${
              column !== "done"
                ? `<button data-action="move" data-from="${column}" data-to="${
                    columns[columns.indexOf(column) + 1]
                  }" data-index="${index}" class="inline-flex items-center justify-center p-1 text-green-500 hover:text-green-600">
                   &rarr;
                  </button>`
                : ""
            }
            <button data-action="delete" data-column="${column}" data-index="${index}" class="inline-flex items-center justify-center p-1 text-red-500 hover:text-red-600">
             &#10540;
            </button>
          </div>
        `;
          columnElement.appendChild(taskElement);
        });
      });
    }

    function addTask(column, task) {
      if (task !== "") {
        tasks[column].push(task);
        renderTasks();
        saveTasks();
      }
    }

    function moveTask(fromColumn, toColumn, taskIndex) {
      const task = tasks[fromColumn].splice(taskIndex, 1)[0];
      tasks[toColumn].push(task);
      renderTasks();
      saveTasks();
    }

    function deleteTask(column, taskIndex) {
      tasks[column].splice(taskIndex, 1);
      renderTasks();
      saveTasks();
    }

    // Event delegation for form submissions
    document.addEventListener("submit", (event) => {
      if (event.target.tagName === "FORM") {
        event.preventDefault();
        const column = event.target.dataset.column;
        const input = event.target.elements[0];
        const task = input.value.trim();
        addTask(column, task);
        input.value = "";
      }
    });

    // Event delegation for move and delete buttons
    document.addEventListener("click", (event) => {
      const button = event.target.closest("button[data-action]");
      if (button) {
        const { action, from, to, column, index } = button.dataset;
        if (action === "move") {
          moveTask(from, to, parseInt(index));
        } else if (action === "delete") {
          deleteTask(column, parseInt(index));
        }
      }
    });

    // Initial render
    renderTasks();
  </script>
</BaseLayout>
