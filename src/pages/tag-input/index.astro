---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create a Tag Input with Alpine.js and Tailwind CSS",
  description: "Learn to build tag input components using Alpine.js and Tailwind CSS. Includes add/remove tags and keyboard support.",
  canonical: "/tag-input",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create a Tag Input with Alpine.js and Tailwind CSS",
      description: "Learn to build tag input components using Alpine.js and Tailwind CSS. Includes add/remove tags and keyboard support.",
      url: "/tag-input",
      datePublished: "2025-10-01T06:22:29.088Z",
      dateModified: "2025-10-01T06:22:29.088Z",
      keywords: ["Tailwind CSS","Alpine.js","Tag Input","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create a Tag Input with Alpine.js and Tailwind CSS", url: "/tag-input" },
    ]),
    generateHowToSchema({
      name: "How to Create a Tag Input with Alpine.js and Tailwind CSS",
      description: "Learn to build tag input components using Alpine.js and Tailwind CSS. Includes add/remove tags and keyboard support.",
      totalTime: "PT20M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base tag input container and elements"
            },
            {
                  "name": "Add Alpine.js interactivity",
                  "text": "Initialize Alpine.js to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Create a Tag Input with Alpine.js and Tailwind CSS</h1>

    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-tag-input-with-alpine-js-and-tailwind-css/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/tag-input/index.astro"
    />
    <Wrapper class="py-24 lg:py-48">
      <!-- Starts component -->
      <div
        class="mx-auto w-fit"
        x-data="{
        tags: [],
        addTag(tag) {
            if (tag.trim() !== '') {
                this.tags.push(tag.trim());
            }
        },
        removeTag(index) {
            this.tags.splice(index, 1);
        }
    }"
      >
        <!-- Tag Input -->
        <div class="w-full" x-data="{ newTag: '', tags: [] }">
          <!-- Input Field -->
          <input
            x-model="newTag"
            @keydown.enter.prevent="
            if (newTag.trim() !== '') {
                tags.push(newTag.trim());
                newTag = '';
            }
        "
            class="w-full mt-1 border-base-300 rounded-md focus:border-accent-500 focus:ring-accent-500"
            type="text"
            placeholder="Add tags (press Enter to add)"
          />
          <!-- Existing Tags -->
          <div class="flex flex-wrap mt-4 gap-2">
            <template x-for="(tag, index) in tags" :key="index">
              <div
                class="inline-flex items-center gap-x-0.5 rounded-md bg-accent-50 px-2 py-1 text-xs font-medium text-accent-700 ring-1 ring-inset ring-accent-700/10"
              >
                <span x-text="tag"></span>
                <button @click="tags.splice(index, 1)" class="ml-2">
                  <svg
                    class="w-4 h-4 text-red-500"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
            </template>
          </div>
        </div>
      </div>
    </Wrapper>
  </section>
</BaseLayout>
