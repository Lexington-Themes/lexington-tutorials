---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create Animations with JavaScript and Tailwind CSS",
  description: "Learn to build animation components using JavaScript and Tailwind CSS. Includes CSS transitions and keyframes.",
  canonical: "/js-bubble-animation",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create Animations with JavaScript and Tailwind CSS",
      description: "Learn to build animation components using JavaScript and Tailwind CSS. Includes CSS transitions and keyframes.",
      url: "/js-bubble-animation",
      datePublished: "2025-10-01T06:22:29.074Z",
      dateModified: "2025-10-01T06:22:29.074Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Animation","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create Animations with JavaScript and Tailwind CSS", url: "/js-bubble-animation" },
    ]),
    generateHowToSchema({
      name: "How to Create Animations with JavaScript and Tailwind CSS",
      description: "Learn to build animation components using JavaScript and Tailwind CSS. Includes CSS transitions and keyframes.",
      totalTime: "PT15M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base animation container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Create Animations with JavaScript and Tailwind CSS</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-bubble-animation-with-tailwind-css-and-javascript"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-bubble-animation/index.astro"
    />
    <!--  Starts component -->
    <Wrapper class="relative overflow-hidden h-svh">
      <div id="bubble-container" class="absolute inset-0 z-0"></div></Wrapper
    >
  </section>
</BaseLayout>

<script type="module">
  function createBubble() {
    const bubble = document.createElement("div");
    bubble.classList.add("bubble");

    // Random size between 20px and 80px
    const size = Math.random() * 60 + 20;
    bubble.style.width = `${size}px`;
    bubble.style.height = `${size}px`;

    // Random starting position
    const startPosition = Math.random() * 100;
    bubble.style.left = `${startPosition}%`;

    // Random animation duration
    const duration = Math.random() * 15 + 10;
    bubble.style.setProperty("--random-offset", Math.random() * 360 + "deg");

    // Apply the animation
    bubble.style.animation = `float ${duration}s linear infinite`;

    // Array of Tailwind color classes
    const colors = [
      "bg-[#f1dfd9]",
      "bg-[#f4c0d8]",
      "bg-[#c9b0df]",
      "bg-[#b767d4]",
      "bg-[#84adc2]",
      "bg-[#c8589e]",
    ];

    // Initial color
    bubble.classList.add(colors[Math.floor(Math.random() * colors.length)]);

    // Change color every 2 seconds
    setInterval(() => {
      bubble.classList.remove(...colors);
      bubble.classList.add(colors[Math.floor(Math.random() * colors.length)]);
    }, 2000);

    // Add bubble to container
    const container = document.getElementById("bubble-container");
    if (container) {
      container.appendChild(bubble);
    }

    // Remove bubble after animation completes
    setTimeout(() => {
      bubble.remove();
    }, duration * 1000);
  }

  // Create new bubbles periodically
  function startBubbleAnimation() {
    // Create initial set of bubbles
    for (let i = 0; i < 10; i++) {
      createBubble();
    }
    // Continue creating bubbles every 300ms
    setInterval(createBubble, 300);
  }

  // Start animation when the page loads
  window.addEventListener("load", startBubbleAnimation);
</script>
