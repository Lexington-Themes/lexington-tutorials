---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "Create a Password Strength Meter with Alpine.js",
  description: "Learn to build password strength meter components using Alpine.js and Tailwind CSS. Includes strength calculation and visual feedback.",
  canonical: "/alpine-password-strength-meter",
  jsonLd: [
    generateArticleSchema({
      title: "Create a Password Strength Meter with Alpine.js",
      description: "Learn to build password strength meter components using Alpine.js and Tailwind CSS. Includes strength calculation and visual feedback.",
      url: "/alpine-password-strength-meter",
      datePublished: "2025-10-01T06:22:29.063Z",
      dateModified: "2025-10-01T06:22:29.063Z",
      keywords: ["Tailwind CSS","Alpine.js","Password Strength Meter","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "Create a Password Strength Meter with Alpine.js", url: "/alpine-password-strength-meter" },
    ]),
    generateHowToSchema({
      name: "Create a Password Strength Meter with Alpine.js",
      description: "Learn to build password strength meter components using Alpine.js and Tailwind CSS. Includes strength calculation and visual feedback.",
      totalTime: "PT15M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base password strength meter container and elements"
            },
            {
                  "name": "Add Alpine.js interactivity",
                  "text": "Initialize Alpine.js to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">Create a Password Strength Meter with Alpine.js</h1>

    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-password-strength-meter-with-tailwind-css-and-alpinejs/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/alpine-password-strength-meter/index.astro"
    />
    <Wrapper class="py-24 lg:py-62">
      <!-- Starts component -->
      <div
        x-data="{
    password: '',
    strength: '',
    showPassword: false,
    checkStrength() {
      const password = this.password;

      // Reset the strength if password is empty
      if (password.length === 0) {
        this.strength = '';
        return;
      }

      // Initialize the strength to weak by default
      this.strength = 'weak';

      // Define conditions for different levels of password strength
      const hasLowerCase = /[a-z]/.test(password);
      const hasUpperCase = /[A-Z]/.test(password);
      const hasNumber = /\d/.test(password);
      const hasSpecialChar = /[!@#$%^&*(),.?':{}|<>]/.test(password);

      // Count the number of passed checks
      const passedChecks = [hasLowerCase, hasUpperCase, hasNumber, hasSpecialChar].filter(Boolean).length;

      // Update strength based on conditions
      if (password.length >= 8) {
        if (passedChecks === 4 || password.length >= 12) {
          this.strength = 'very strong';
        } else if (passedChecks >= 3) {
          this.strength = 'strong';
        } else if (passedChecks >= 2) {
          this.strength = 'medium';
        }
      }
    }
}"
        class="w-full max-w-sm mx-auto space-y-4"
      >
        <!-- Password Input -->
        <div>
          <label for="password" class="sr-only">Password</label>
          <div class="relative">
            <input
              id="password"
              :type="showPassword ? 'text' : 'password'"
              x-model="password"
              @input="checkStrength()"
              class="block w-full h-12 px-4 py-3 text-xs border-0 rounded-lg appearance-none placeholder-base-500 bg-base-100 text-accent-500 focus:border-accent-500 focus:bg-white focus:outline-none focus:ring-accent-500 focus:ring-inset focus:ring-2"
              placeholder="Enter your password"
            />
            <button
              @click="showPassword = !showPassword"
              type="button"
              class="absolute inset-y-0 right-0 flex items-center pr-3"
            >
              <span x-show="!showPassword" class="text-base-500"
                ><svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="icon icon-tabler icons-tabler-outline icon-tabler-eye"
                  ><path stroke="none" d="M0 0h24v24H0z" fill="none"
                  ></path><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"
                  ></path><path
                    d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6"
                  ></path></svg
                ></span
              >
              <span x-show="showPassword" class="text-accent-500"
                ><svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  class="icon icon-tabler icons-tabler-filled icon-tabler-eye"
                  ><path stroke="none" d="M0 0h24v24H0z" fill="none"
                  ></path><path
                    d="M12 4c4.29 0 7.863 2.429 10.665 7.154l.22 .379l.045 .1l.03 .083l.014 .055l.014 .082l.011 .1v.11l-.014 .111a.992 .992 0 0 1 -.026 .11l-.039 .108l-.036 .075l-.016 .03c-2.764 4.836 -6.3 7.38 -10.555 7.499l-.313 .004c-4.396 0 -8.037 -2.549 -10.868 -7.504a1 1 0 0 1 0 -.992c2.831 -4.955 6.472 -7.504 10.868 -7.504zm0 5a3 3 0 1 0 0 6a3 3 0 0 0 0 -6z"
                  ></path></svg
                ></span
              >
            </button>
          </div>
        </div>

        <!-- Password Strength Meter -->
        <div class="h-2 overflow-hidden rounded-full bg-base-200">
          <div
            class="h-full transition-all duration-300 ease-out"
            :class="{
      'w-1/4 bg-red-500': strength === 'weak',
      'w-1/2 bg-yellow-500': strength === 'medium',
      'w-3/4 bg-green-500': strength === 'strong',
      'w-full bg-accent-500': strength === 'very strong'
    }"
          >
          </div>
        </div>

        <!-- Password Strength Text -->
        <p
          class="text-sm font-medium"
          :class="{
    'text-red-500': strength === 'weak',
    'text-yellow-500': strength === 'medium',
    'text-green-500': strength === 'strong',
    'text-accent-500': strength === 'very strong'
  }"
        >
          Password strength: <span x-text="strength"></span>
        </p>
      </div>
    </Wrapper>
  </section>
</BaseLayout>
