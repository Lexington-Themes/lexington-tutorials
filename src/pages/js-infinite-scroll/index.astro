---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "Create Js Infinite Scroll with JavaScript",
  description: "Learn to build js infinite scroll components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
  canonical: "/js-infinite-scroll",
  jsonLd: [
    generateArticleSchema({
      title: "Create Js Infinite Scroll with JavaScript",
      description: "Learn to build js infinite scroll components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
      url: "/js-infinite-scroll",
      datePublished: "2025-10-01T06:22:29.078Z",
      dateModified: "2025-10-01T06:22:29.078Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Js Infinite Scroll","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "Create Js Infinite Scroll with JavaScript", url: "/js-infinite-scroll" },
    ]),
    generateHowToSchema({
      name: "Create Js Infinite Scroll with JavaScript",
      description: "Learn to build js infinite scroll components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
      totalTime: "PT20M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base js infinite scroll container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">Create Js Infinite Scroll with JavaScript</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-infinite-scrolling-with-tailwind-css-and-javascript"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-infinite-scroll/index.astro"
    />
    <!--  Starts component -->
    <Wrapper class="py-24">
      <div class="max-w-xl mx-auto">
        <div id="content" class="space-y-4 text-base-500" aria-live="polite">
          <!-- Dynamic content will be appended here -->
        </div>
        <div id="loader" class="hidden mx-auto my-8 text-center w-fit">
          <div
            class="border-4 rounded-full size-8 border-accent-600 border-t-transparent animate-spin"
          >
          </div>
        </div>
        <div class="mt-4 text-center">
          <button
            id="load-more"
            class="w-auto h-12 px-8 py-2 text-sm font-semibold text-white rounded-full bg-accent-600 hover:bg-accent-500 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
            >Load More</button
          >
        </div>
      </div>
    </Wrapper>
  </section></BaseLayout
>
<script type="module">
  document.addEventListener("DOMContentLoaded", function () {
    const content = document.getElementById("content");
    const loader = document.getElementById("loader");
    const loadMoreButton = document.getElementById("load-more");
    let isLoading = false;
    let page = 1;

    function loadMoreContent() {
      if (isLoading) return;
      isLoading = true;
      loader.classList.remove("hidden");
      loadMoreButton.disabled = true;

      // Simulate an API call with setTimeout
      setTimeout(() => {
        for (let i = 0; i < 20; i++) {
          const item = document.createElement("div");
          item.className = "p-4 text-center rounded-lg bg-base-100";
          item.textContent = `Item ${(page - 1) * 25 + i + 1}`;
          content.appendChild(item);
        }
        loader.classList.add("hidden");
        isLoading = false;
        loadMoreButton.disabled = false;
        page++;

        // Announce to screen readers that new content has been loaded
        const announcement = document.createElement("div");
        announcement.textContent = "New items have been loaded.";
        announcement.setAttribute("role", "status");
        announcement.setAttribute("aria-live", "polite");
        announcement.style.position = "absolute";
        announcement.style.left = "-9999px";
        document.body.appendChild(announcement);
        setTimeout(() => document.body.removeChild(announcement), 1000);
      }, 1000);
    }

    // Intersection Observer for infinite scroll
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && !isLoading) {
          loadMoreContent();
        }
      },
      { rootMargin: "100px" }
    );

    observer.observe(loader);

    // Event listener for the Load More button
    loadMoreButton.addEventListener("click", loadMoreContent);

    // Initial load
    loadMoreContent();
  });
</script>
