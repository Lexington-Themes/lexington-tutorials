---
// Fundations
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";
// SEO Configuration
const seoConfig = {
  title: "Create Js Masonry Layout with Tailwind CSS",
  description: "Learn to build js masonry layout components using Tailwind CSS. Includes responsive design and modern styling.",
  canonical: "/js-masonry-layout",
  jsonLd: [
    generateArticleSchema({
      title: "Create Js Masonry Layout with Tailwind CSS",
      description: "Learn to build js masonry layout components using Tailwind CSS. Includes responsive design and modern styling.",
      url: "/js-masonry-layout",
      datePublished: "2025-10-01T06:26:58.391Z",
      dateModified: "2025-10-01T06:26:58.391Z",
      keywords: ["Tailwind CSS","Js Masonry Layout","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "Create Js Masonry Layout with Tailwind CSS", url: "/js-masonry-layout" },
    ]),
    generateHowToSchema({
      name: "Create Js Masonry Layout with Tailwind CSS",
      description: "Learn to build js masonry layout components using Tailwind CSS. Includes responsive design and modern styling.",
      totalTime: "PT20M",
      steps: [
        { name: "Set up HTML structure", text: "Create the base component container and elements" },
        { name: "Add interactivity", text: "Initialize state management and event handlers" },
        { name: "Style with Tailwind CSS", text: "Apply utility classes for responsive layout" },
        { name: "Add accessibility features", text: "Implement ARIA attributes and keyboard navigation" },
        { name: "Test the component", text: "Verify functionality across browsers and devices" },
      ],
    }),
  ],
};

const heroImages = [
  "/3d/1.jpeg",
  "/3d/2.jpeg",
  "/3d/3.jpeg",
  "/3d/4.jpeg",
  "/3d/5.jpeg",
  "/3d/6.jpeg",
  "/3d/7.jpeg",
  "/3d/8.jpeg",
  "/3d/9.jpeg",
  "/3d/10.jpeg",
  "/3d/11.jpeg",
  "/3d/12.jpeg",
  "/3d/13.jpeg",
  "/3d/14.jpeg",
  "/3d/15.jpeg",
];
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">Create Js Masonry Layout with Tailwind CSS</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-masonry-grid-layout-with-tailwind-css-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-masonry-layout/index.astro"
    />
    <Wrapper class="py-24">
      <div id="masonry-grid" class="gap-4">
        {
          heroImages.map((imagePath) => (
            <img src={imagePath} class="rounded-2xl" alt="#_" />
          ))
        }
      </div>
    </Wrapper>
  </section>
</BaseLayout>

<script type="module">
  const masonryGrid = document.getElementById("masonry-grid");
  const columnWidth = 300; // Adjust this value as needed
  const gap = 18; // Adjust this value to change the gap (in pixels)
  function createMasonryGrid() {
    const gridWidth = masonryGrid.offsetWidth;
    const columns = Math.floor(gridWidth / columnWidth) || 1;
    // Reset the grid layout
    masonryGrid.style.columnCount = columns.toString();
    masonryGrid.style.columnGap = `${gap}px`;
    // Remove any existing grid styles
    masonryGrid.style.display = "block";
    masonryGrid.style.gridTemplateColumns = "";
    masonryGrid.style.gridTemplateRows = "";
    const items = Array.from(masonryGrid.children);
    items.forEach((item) => {
      // Reset item styles
      item.style.gridRowStart = "";
      item.style.gridColumnStart = "";
      // Add styles for masonry layout
      item.style.breakInside = "avoid";
      item.style.marginBottom = `${gap}px`; // Set the vertical gap between items
    });
  }
  // Initial layout
  createMasonryGrid();
  // Update layout on window resize
  window.addEventListener("resize", createMasonryGrid);
  // Update layout when all images are loaded
  window.addEventListener("load", createMasonryGrid);
  // Optional: Update layout when new images are added
  const observer = new MutationObserver(createMasonryGrid);
  observer.observe(masonryGrid, { childList: true, subtree: true });
</script>
