---
// Fundations
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
---

<BaseLayout>
  <section>
    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-music-visualizer-with-tailwind-css-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-music-visualizer/index.astro"
    />
    <Wrapper class="py-24">
      <!-- Starts component -->
      <div class="items-center w-full max-w-xl mx-auto">
        <audio
          id="audio"
          controls
          src="/music/sample.mp3"
          class="justify-center w-full"></audio>
        <canvas id="visualizer" class="w-full mt-8 rounded-lg bg-base-800 h-72"
        ></canvas>
      </div>
      <!-- Ends component -->
    </Wrapper>
  </section>
</BaseLayout>
<script type="module">
  const audio = document.getElementById("audio");
  const canvas = document.getElementById("visualizer");
  const ctx = canvas.getContext("2d");
  let audioContext;
  let analyser;
  let dataArray;
  function initializeAudio() {
    if (!audioContext) {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      analyser = audioContext.createAnalyser();
      analyser.fftSize = 256;
      const bufferLength = analyser.frequencyBinCount;
      dataArray = new Uint8Array(bufferLength);
      const source = audioContext.createMediaElementSource(audio);
      source.connect(analyser);
      analyser.connect(audioContext.destination);
    }
    requestAnimationFrame(visualize);
  }
  audio.addEventListener("play", initializeAudio);
  function visualize() {
    const WIDTH = canvas.width;
    const HEIGHT = canvas.height;
    const barWidth = (WIDTH / dataArray.length) * 2.5;
    analyser.getByteFrequencyData(dataArray);
    ctx.fillStyle = "rgb(17, 24, 39)";
    ctx.fillRect(0, 0, WIDTH, HEIGHT);
    for (let i = 0; i < dataArray.length; i++) {
      const barHeight = dataArray[i] / 2;
      const hue = (i / dataArray.length) * 360;
      ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;
      ctx.fillRect(i * barWidth, HEIGHT - barHeight, barWidth, barHeight);
    }
    requestAnimationFrame(visualize);
  }
</script>
