---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Build a Form with JavaScript and Tailwind CSS",
  description: "Learn to build form components using JavaScript and Tailwind CSS. Includes validation and error handling.",
  canonical: "/js-auth-form",
  jsonLd: [
    generateArticleSchema({
      title: "How to Build a Form with JavaScript and Tailwind CSS",
      description: "Learn to build form components using JavaScript and Tailwind CSS. Includes validation and error handling.",
      url: "/js-auth-form",
      datePublished: "2025-10-01T06:22:29.073Z",
      dateModified: "2025-10-01T06:22:29.073Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Form","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Build a Form with JavaScript and Tailwind CSS", url: "/js-auth-form" },
    ]),
    generateHowToSchema({
      name: "How to Build a Form with JavaScript and Tailwind CSS",
      description: "Learn to build form components using JavaScript and Tailwind CSS. Includes validation and error handling.",
      totalTime: "PT20M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base form container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Build a Form with JavaScript and Tailwind CSS</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-login-register-form-with-tailwind-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-auth-form/index.astro"
    />
    <!--  Starts component -->
    <Wrapper id="loginFormContainer" class="py-24">
      <form id="loginForm" class="mx-auto w-fit">
        <div class="py-2 space-y-3">
          <label for="login_email" class="block text-sm text-base-700"
            >Email</label
          >
          <input
            type="email"
            id="login_email"
            class="block w-full h-12 px-4 py-3 text-xs border-0 rounded-lg appearance-none placeholder-base-500 bg-base-100 text-accent-500 focus:border-accent-500 focus:bg-white focus:outline-none focus:ring-accent-500 focus:ring-inset focus:ring-2"
            placeholder="Enter your email"
            required
          />
          <p id="emailError" class="hidden mt-1 text-xs text-red-500">
            Email is required
          </p>
        </div>
        <div class="py-2 space-y-3">
          <label for="login_password" class="block text-sm text-base-700"
            >Password</label
          >
          <div class="relative">
            <input
              type="password"
              id="login_password"
              class="block w-full h-12 px-4 py-3 text-xs border-0 rounded-lg appearance-none placeholder-base-500 bg-base-100 text-accent-500 focus:border-accent-500 focus:bg-white focus:outline-none focus:ring-accent-500 focus:ring-2 focus:ring-inset"
              placeholder="Enter your password"
              required
            />
            <span
              id="togglePassword"
              class="absolute inset-y-0 right-0 flex items-center pr-4 text-xs cursor-pointer text-base-400"
              >Show</span
            >
          </div>
          <p class="mt-1 text-xs text-base-500 lg:text-pretty">
            Password must contain at least one capital letter and a special
            character.
          </p>
          <p id="passwordError" class="hidden mt-1 text-xs text-red-500">
            Password does not meet requirements
          </p>
        </div>
        <div class="mt-4">
          <button
            type="submit"
            class="w-full h-12 px-8 py-2 text-sm font-semibold text-white rounded-full bg-accent-600 hover:bg-accent-500 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
            >Login</button
          >
        </div>
      </form>
    </Wrapper>
    <!--  Ends component -->
  </section>

  <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
      const loginForm = document.getElementById("loginForm");
      const loginEmail = document.getElementById("login_email");
      const loginPassword = document.getElementById("login_password");
      const emailError = document.getElementById("emailError");
      const passwordError = document.getElementById("passwordError");
      const togglePassword = document.getElementById("togglePassword");

      const passwordPattern = /^(?=.*[A-Z])(?=.*\W).+$/;
      let showPassword = false;

      togglePassword.addEventListener("click", () => {
        showPassword = !showPassword;
        loginPassword.type = showPassword ? "text" : "password";
        togglePassword.textContent = showPassword ? "Hide" : "Show";
      });

      loginForm.addEventListener("submit", (event) => {
        event.preventDefault();

        if (!loginEmail.value) {
          emailError.classList.remove("hidden");
        } else {
          emailError.classList.add("hidden");
        }

        if (!passwordPattern.test(loginPassword.value)) {
          passwordError.classList.remove("hidden");
        } else {
          passwordError.classList.add("hidden");
        }

        if (loginEmail.value && passwordPattern.test(loginPassword.value)) {
          // Perform login action here
          alert("Login successful");
        }
      });
    });
  </script>
</BaseLayout>
