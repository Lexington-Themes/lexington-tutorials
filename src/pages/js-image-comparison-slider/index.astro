---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create a Slider with JavaScript and Tailwind CSS",
  description: "Learn to build slider components using JavaScript and Tailwind CSS. Includes drag functionality and range selection.",
  canonical: "/js-image-comparison-slider",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create a Slider with JavaScript and Tailwind CSS",
      description: "Learn to build slider components using JavaScript and Tailwind CSS. Includes drag functionality and range selection.",
      url: "/js-image-comparison-slider",
      datePublished: "2025-10-01T06:22:29.078Z",
      dateModified: "2025-10-01T06:22:29.078Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Slider","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create a Slider with JavaScript and Tailwind CSS", url: "/js-image-comparison-slider" },
    ]),
    generateHowToSchema({
      name: "How to Create a Slider with JavaScript and Tailwind CSS",
      description: "Learn to build slider components using JavaScript and Tailwind CSS. Includes drag functionality and range selection.",
      totalTime: "PT20M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base slider container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Create a Slider with JavaScript and Tailwind CSS</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-an-image-comparison-slider-with-tailwind-css-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-image-comparison-slider/index.astro"
    />
    <!--  Starts component -->
    <Wrapper class="py-24 lg:py-48">
      <!-- Starts component -->
      <div
        id="image-comparison"
        class="relative h-[300px] sm:h-[400px] md:h-[500px] overflow-hidden w-full mx-auto"
      >
        <!-- Before Image -->
        <img
          src="https://molle.lexingtonthemes.com/_astro/before.BSKClwx__ITRhP.webp"
          alt="Before Image"
          draggable="false"
          class="absolute top-0 left-0 object-cover w-full h-full"
        />
        <!-- After Image (in overlay) -->
        <div
          id="image-overlay"
          class="absolute top-0 left-0 w-1/2 h-full overflow-hidden"
        >
          <img
            src="https://molle.lexingtonthemes.com/_astro/after.P7dMRTjC_XntEy.webp"
            alt="After Image"
            draggable="false"
            class="absolute top-0 left-0 object-cover w-full h-full"
          />
        </div>
        <!-- Slider Handle -->
        <div
          id="slider-handle"
          class="absolute top-0 bottom-0 w-1 bg-white cursor-ew-resize"
          style="left: 50%;"
        >
          <div
            class="absolute flex items-center justify-center w-8 h-8 -mt-4 -ml-4 bg-white rounded-full shadow-md top-1/2 left-1/2"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="text-base-600"
            >
              <path d="M18 8L22 12L18 16"></path>
              <path d="M6 8L2 12L6 16"></path>
            </svg>
          </div>
        </div>
      </div>
    </Wrapper>
  </section>
  <script type="module">
    document.addEventListener("DOMContentLoaded", function () {
      const container = document.getElementById("image-comparison");
      const overlay = document.getElementById("image-overlay");
      const handle = document.getElementById("slider-handle");
      let isDragging = false;

      function updateSliderPosition(x) {
        const containerRect = container.getBoundingClientRect();
        const containerWidth = containerRect.width;
        const position = Math.max(
          0,
          Math.min(x - containerRect.left, containerWidth)
        );
        const percentage = (position / containerWidth) * 100;
        overlay.style.width = `${percentage}%`;
        handle.style.left = `${percentage}%`;
      }

      function onMouseDown(e) {
        isDragging = true;
        updateSliderPosition(e.clientX);
      }

      function onMouseMove(e) {
        if (!isDragging) return;
        updateSliderPosition(e.clientX);
      }

      function onMouseUp() {
        isDragging = false;
      }

      // Mouse events
      handle.addEventListener("mousedown", onMouseDown);
      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);

      // Touch events
      handle.addEventListener("touchstart", (e) => {
        isDragging = true;
        updateSliderPosition(e.touches[0].clientX);
      });
      document.addEventListener("touchmove", (e) => {
        if (!isDragging) return;
        updateSliderPosition(e.touches[0].clientX);
      });
      document.addEventListener("touchend", onMouseUp);

      // Prevent default drag behavior
      handle.addEventListener("dragstart", (e) => e.preventDefault());

      // Keyboard accessibility
      handle.setAttribute("tabindex", "0");
      handle.addEventListener("keydown", (e) => {
        const step = 1;
        let newPercentage;
        if (e.key === "ArrowLeft") {
          newPercentage = Math.max(
            0,
            parseFloat(overlay.style.width || "50") - step
          );
        } else if (e.key === "ArrowRight") {
          newPercentage = Math.min(
            100,
            parseFloat(overlay.style.width || "50") + step
          );
        } else {
          return;
        }
        overlay.style.width = `${newPercentage}%`;
        handle.style.left = `${newPercentage}%`;
        e.preventDefault();
      });

      // Fix: keep slider aligned on window resize
      window.addEventListener("resize", () => {
        const currentPercentage = parseFloat(overlay.style.width || "50");
        const containerRect = container.getBoundingClientRect();
        const newX =
          containerRect.left + (currentPercentage / 100) * containerRect.width;
        updateSliderPosition(newX);
      });
    });
  </script>
</BaseLayout>
