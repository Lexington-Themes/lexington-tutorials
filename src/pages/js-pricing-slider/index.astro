---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "How to Create a Slider with JavaScript and Tailwind CSS",
  description: "Learn to build slider components using JavaScript and Tailwind CSS. Includes drag functionality and range selection.",
  canonical: "/js-pricing-slider",
  jsonLd: [
    generateArticleSchema({
      title: "How to Create a Slider with JavaScript and Tailwind CSS",
      description: "Learn to build slider components using JavaScript and Tailwind CSS. Includes drag functionality and range selection.",
      url: "/js-pricing-slider",
      datePublished: "2025-10-01T06:22:29.080Z",
      dateModified: "2025-10-01T06:22:29.080Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Slider","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "How to Create a Slider with JavaScript and Tailwind CSS", url: "/js-pricing-slider" },
    ]),
    generateHowToSchema({
      name: "How to Create a Slider with JavaScript and Tailwind CSS",
      description: "Learn to build slider components using JavaScript and Tailwind CSS. Includes drag functionality and range selection.",
      totalTime: "PT20M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base slider container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">How to Create a Slider with JavaScript and Tailwind CSS</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-pricing-slider-with-tailwind-css-and-javascript"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-pricing-slider/index.astro"
    />
    <!--  Starts component -->
    <Wrapper class="py-24">
      <!-- Starts component -->
      <div class="mx-auto w-fit">
        <div>
          <input
            type="range"
            id="pageviews"
            min="0"
            max="1000000"
            step="1000"
            class="w-full h-8 px-2 mt-2 overflow-hidden border rounded-full outline-none appearance-none border-base-300"
            style="--thumb-color: #f94121;"
          />
        </div>
        <div class="flex items-center w-full mt-4 gap-x-2">
          <label for="pageviews" class="block text-base-500">Pageviews</label>
          <input
            type="number"
            id="inputPageviews"
            class="w-full h-10 px-2 py-1 border rounded-lg outline-none border-base-300 text-base-700 focus:ring focus:ring-accent-600"
          />
        </div>
        <div
          class="w-full pt-8 mt-8 border-t border-base-200 lg:flex lg:flex-col lg:justify-center"
        >
          <p class="flex items-baseline">
            <span class="flex text-4xl font-medium tracking-tight text-black"
              >$<input
                type="text"
                id="price"
                readonly
                class="w-auto p-0 text-4xl bg-transparent border-none pointer-events-none"
              /></span
            >
          </p>
          <div class="flex items-center mt-4 gap-x-2">
            <label for="pageviews" class="block text-base-500">Pageviews</label>
            <span id="pageviewsText" class="text-base-500"></span>
          </div>
          <p class="mt-8 text-sm lg:text-pretty text-base-500">
            This plan is tailored for small businesses and startups
          </p>
          <div class="mt-4">
            <button
              type="submit"
              class="justify-center flex items-center gap-x-2 rounded-full bg-accent-600 px-4 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-accent-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-accent-600 w-full"
              >Get access</button
            >
          </div>
          <p class="mt-6 text-xs leading-5 text-base-500 text-pretty">
            Invoices and receipts available for easy company reimbursement
          </p>
        </div>
      </div>
      <!-- Ends component -->
    </Wrapper>
  </section>
</BaseLayout>

<script type="module">
  document.addEventListener("DOMContentLoaded", function () {
    const pageviewsInput = document.getElementById("pageviews");
    const inputPageviews = document.getElementById("inputPageviews");
    const priceInput = document.getElementById("price");
    const pageviewsText = document.getElementById("pageviewsText");

    function calculatePrice(pageviews) {
      return (Math.ceil(pageviews / 1000) * 0.001 * 50).toFixed(2);
    }

    function updatePriceAndPageviews(pageviews) {
      priceInput.value = calculatePrice(pageviews);
      pageviewsText.textContent = parseInt(pageviews, 10).toLocaleString();
    }

    function handleInput(event) {
      const pageviews = event.target.value;
      pageviewsInput.value = pageviews;
      inputPageviews.value = pageviews;
      updatePriceAndPageviews(pageviews);
    }

    pageviewsInput.addEventListener("input", handleInput);
    inputPageviews.addEventListener("input", handleInput);

    // Initialize with default value
    pageviewsInput.value = 0;
    inputPageviews.value = 0;
    updatePriceAndPageviews(0);
  });
</script>
