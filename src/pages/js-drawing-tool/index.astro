---
import BaseLayout from "@/layouts/BaseLayout.astro";
---
<BaseLayout>
  <section class="overflow-hidden">
    <div
      class="w-full mx-auto max-w-xl flex flex-col min-h-svh justify-center py-32 p-8">
      <div
        class="prose text-gray-500 prose-sm prose-headings:font-normal prose-headings:text-xl">
        <h1>
          Basic drawing tool
        </h1>
        <p>Start drawing on the canvas and save to png</p>
      </div>
      <div class="mt-6 border-t  border-neutral-200  pt-12">
        <!-- Starts component -->
        <div >
          <canvas
            id="drawingCanvas"
            class="border border-gray-200 shadow rounded-xl w-full h-80"
          ></canvas>
          <div class="mt-4 flex items-center space-x-4 w-full flex-row">
            <input
              type="color"
              id="colorPicker"
              class="h-10 w-10"
            />
            <input
              type="range"
              id="brushSize"
              min="1"
              max="20"
              value="5"
              class="w-full"
            />
          </div>
          <div class="flex  mt-8 gap-4">
            <button
              id="clearBtn"
              class="rounded-full bg-blue-50 px-8 py-2 h-12 text-sm font-semibold text-blue-600 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 w-full"
              >Clear</button
            >
            <button
              id="saveBtn"
              class="rounded-full bg-blue-600 px-8 py-2 h-12 text-sm font-semibold text-white hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 w-full"
              >Save</button
            >
          </div>
        </div>
        <!-- Ends component -->
      </div>
    </div>
    <!-- Starts links to tutorial -->
    <div class="pointer-events-none fixed inset-x-0 bottom-0 sm:flex p-2">
      <div
        class="pointer-events-auto flex w-full max-w-md divide-x divide-neutral-200 rounded-lg bg-white shadow-xl border border-neutral-200">
        <div class="flex w-0 flex-1 items-center p-4">
          <div class="w-full">
            <p class="text-sm font-medium text-neutral-900">Tutorial</p>
            <p class="mt-1 text-sm text-neutral-500">
              How to create a basic drawing tool and save to PNG with Tailwind CSS and
              JavaScript
            </p>
            <p class="mt-2 text-xs text-orange-500 underline">
              <a href="https://lexingtonthemes.com"> by Â© Lexington Themes</a>
            </p>
          </div>
        </div>
        <div class="flex">
          <div class="flex flex-col divide-y divide-neutral-200">
            <div class="flex h-0 flex-1">
              <a
                href="https://lexingtonthemes.com/tutorials/how-to-create-a-basic-drawing-tool-and-save-to-png-with-tailwind-css-and-javascript/"
                type="button"
                class="flex w-full items-center justify-center rounded-none rounded-tr-lg px-4 py-3 text-sm font-medium text-orange-600 hover:text-orange-500 focus:z-10 focus:outline-none focus:ring-2 focus:ring-orange-500"
                >Tutorial</a
              >
            </div>
            <div class="flex h-0 flex-1">
              <a
                href="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-drawing-tool/index.astro"
                class="flex w-full items-center justify-center rounded-none rounded-br-lg  px-4 py-3 text-sm font-medium text-neutral-700 hover:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-orange-500"
                >Get the code</a
              >
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Ends links to tutorial -->
  </section>
</BaseLayout>
<script type="module">
  const canvas = document.getElementById("drawingCanvas");
  const ctx = canvas.getContext("2d");
  const colorPicker = document.getElementById("colorPicker");
  const brushSize = document.getElementById("brushSize");
  const clearBtn = document.getElementById("clearBtn");
  const saveBtn = document.getElementById("saveBtn");
  let isDrawing = false;
  function resizeCanvas() {
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
  }
  function getMousePos(canvas, e) {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    return {
      x: (e.clientX - rect.left) * scaleX,
      y: (e.clientY - rect.top) * scaleY,
    };
  }
  function startDrawing(e) {
    isDrawing = true;
    draw(e);
  }
  function stopDrawing() {
    isDrawing = false;
    ctx.beginPath();
  }
  function draw(e) {
    if (!isDrawing) return;
    ctx.lineWidth = brushSize.value;
    ctx.lineCap = "round";
    ctx.strokeStyle = colorPicker.value;
    const pos = getMousePos(canvas, e);
    ctx.lineTo(pos.x, pos.y);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(pos.x, pos.y);
  }
  function clearCanvas() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
  function saveDrawing() {
    const dataURL = canvas.toDataURL("image/png");
    const link = document.createElement("a");
    link.download = "drawing.png";
    link.href = dataURL;
    link.click();
  }
  window.addEventListener("resize", resizeCanvas);
  canvas.addEventListener("mousedown", startDrawing);
  canvas.addEventListener("mousemove", draw);
  canvas.addEventListener("mouseup", stopDrawing);
  canvas.addEventListener("mouseout", stopDrawing);
  clearBtn.addEventListener("click", clearCanvas);
  saveBtn.addEventListener("click", saveDrawing);
  // Initialize canvas size
  resizeCanvas();
</script>
