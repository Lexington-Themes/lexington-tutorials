---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "Create Js Drawing Tool with JavaScript",
  description: "Learn to build js drawing tool components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
  canonical: "/js-drawing-tool",
  jsonLd: [
    generateArticleSchema({
      title: "Create Js Drawing Tool with JavaScript",
      description: "Learn to build js drawing tool components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
      url: "/js-drawing-tool",
      datePublished: "2025-10-01T06:22:29.077Z",
      dateModified: "2025-10-01T06:22:29.077Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Js Drawing Tool","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "Create Js Drawing Tool with JavaScript", url: "/js-drawing-tool" },
    ]),
    generateHowToSchema({
      name: "Create Js Drawing Tool with JavaScript",
      description: "Learn to build js drawing tool components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
      totalTime: "PT20M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base js drawing tool container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---

<BaseLayout seo={seoConfig}>
  <section class="overflow-hidden">
  <h1 class="sr-only">Create Js Drawing Tool with JavaScript</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-basic-drawing-tool-and-save-to-png-with-tailwind-css-and-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-drawing-tool/index.astro"
    />
    <!--  Starts component -->
    <Wrapper class="py-24">
      <!-- Starts component -->
      <div class="max-w-xl mx-auto">
        <canvas
          id="drawingCanvas"
          class="w-full border border-base-200 rounded-xl h-80"></canvas>
        <div class="flex flex-row items-center w-full mt-4 space-x-4">
          <input type="color" id="colorPicker" class="w-10 h-10" />
          <input
            type="range"
            id="brushSize"
            min="1"
            max="20"
            value="5"
            class="w-full"
          />
        </div>
        <div class="flex mt-8 gap-4">
          <button
            id="clearBtn"
            class="w-full h-12 px-8 py-2 text-sm font-semibold rounded-full bg-accent-50 text-accent-600 hover:bg-accent-100 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
            >Clear</button
          >
          <button
            id="saveBtn"
            class="w-full h-12 px-8 py-2 text-sm font-semibold text-white rounded-full bg-accent-600 hover:bg-accent-500 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
            >Save</button
          >
        </div>
      </div>
      <!-- Ends component -->
    </Wrapper>
  </section>
</BaseLayout>
<script type="module">
  const canvas = document.getElementById("drawingCanvas");
  const ctx = canvas.getContext("2d");
  const colorPicker = document.getElementById("colorPicker");
  const brushSize = document.getElementById("brushSize");
  const clearBtn = document.getElementById("clearBtn");
  const saveBtn = document.getElementById("saveBtn");
  let isDrawing = false;
  function resizeCanvas() {
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
  }
  function getMousePos(canvas, e) {
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    return {
      x: (e.clientX - rect.left) * scaleX,
      y: (e.clientY - rect.top) * scaleY,
    };
  }
  function startDrawing(e) {
    isDrawing = true;
    draw(e);
  }
  function stopDrawing() {
    isDrawing = false;
    ctx.beginPath();
  }
  function draw(e) {
    if (!isDrawing) return;
    ctx.lineWidth = brushSize.value;
    ctx.lineCap = "round";
    ctx.strokeStyle = colorPicker.value;
    const pos = getMousePos(canvas, e);
    ctx.lineTo(pos.x, pos.y);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(pos.x, pos.y);
  }
  function clearCanvas() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
  function saveDrawing() {
    const dataURL = canvas.toDataURL("image/png");
    const link = document.createElement("a");
    link.download = "drawing.png";
    link.href = dataURL;
    link.click();
  }
  window.addEventListener("resize", resizeCanvas);
  canvas.addEventListener("mousedown", startDrawing);
  canvas.addEventListener("mousemove", draw);
  canvas.addEventListener("mouseup", stopDrawing);
  canvas.addEventListener("mouseout", stopDrawing);
  clearBtn.addEventListener("click", clearCanvas);
  saveBtn.addEventListener("click", saveDrawing);
  // Initialize canvas size
  resizeCanvas();
</script>
