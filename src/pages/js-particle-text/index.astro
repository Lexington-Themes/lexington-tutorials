---
// Fundations
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
---
<BaseLayout>
  <section>
    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-a-circular-menu-with-tailwind-css-and-minimal-javascript/"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-circular%20menu/index.astro"
    />
    <Wrapper class="py-24 lg:py-62">
      <div id="text-container" class="flex items-center h-96 lg:h-24"></div>
    </Wrapper>
  </section>
  <!-- Links to tutorial -->
  <div
    class="fixed inset-x-0 bottom-0 p-2 pointer-events-none sm:flex sm:justify-center"
  >
    <div
      class="flex w-full max-w-md bg-white border rounded-lg shadow-xl pointer-events-auto divide-x divide-base-200 border-base-200"
    >
      <div class="flex items-center flex-1 w-0 p-4">
        <div class="w-full">
          <p class="text-sm font-medium text-base-900">Tutorial</p>
          <p class="mt-1 text-sm text-base-500">
            How to create a particle text effect with Tailwind CSS and
            JavaScript
          </p>
          <p class="mt-2 text-xs underline text-accent-500">
            <a href="https://lexingtonthemes.com"> by Â© Lexington Themes</a>
          </p>
        </div>
      </div>
      <div class="flex flex-col divide-y divide-base-200">
        <a
          href="https://lexingtonthemes.com/tutorials/how-to-create-particle-text-effect-with-tailwind-css-and-javascript"
          class="flex items-center justify-center px-4 py-3 text-sm font-medium text-accent-600 hover:text-accent-500 focus:outline-none"
          >Tutorial</a
        >
        <a
          href="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-particle-text/index.astro"
          class="flex items-center justify-center px-4 py-3 text-sm font-medium text-base-700 hover:text-base-500 focus:outline-none"
          >Get the code</a
        >
      </div>
    </div>
  </div>
</BaseLayout>
<script type="module">
  class ParticleTextAnimation {
    constructor(containerId, initialText, finalText, particleCount = 500) {
      this.container = document.getElementById(containerId);
      this.initialText = initialText;
      this.finalText = finalText;
      this.particleCount = particleCount;
      this.particles = [];
      this.animationFrame = null;
      this.init();
    }
    init() {
      this.createParticles();
      this.addEventListeners();
      this.startAnimation();
    }
    createParticles() {
      const fragment = document.createDocumentFragment();
      const containerRect = this.container.getBoundingClientRect();
      for (let i = 0; i < this.particleCount; i++) {
        const particle = document.createElement("span");
        particle.textContent = this.getRandomChar();
        particle.className =
          "absolute opacity-0 transition-all duration-1000 ease-out";
        fragment.appendChild(particle);
        this.particles.push({
          element: particle,
          x: Math.random() * containerRect.width,
          y: Math.random() * containerRect.height,
          speedX: Math.random() * 2 - 1,
          speedY: Math.random() * 2 - 1,
        });
      }
      this.container.appendChild(fragment);
    }
    getRandomChar() {
      return this.initialText[
        Math.floor(Math.random() * this.initialText.length)
      ];
    }
    animateParticles() {
      const containerRect = this.container.getBoundingClientRect();
      this.particles.forEach((particle) => {
        particle.x += particle.speedX;
        particle.y += particle.speedY;
        if (particle.x < 0 || particle.x > containerRect.width)
          particle.speedX *= -1;
        if (particle.y < 0 || particle.y > containerRect.height)
          particle.speedY *= -1;
        Object.assign(particle.element.style, {
          transform: `translate(${particle.x}px, ${particle.y}px)`,
          opacity: "1",
        });
      });
      this.animationFrame = requestAnimationFrame(
        this.animateParticles.bind(this)
      );
    }
    reformText() {
      const containerRect = this.container.getBoundingClientRect();
      const fontSize = window.innerWidth < 1024 ? 16 : 54;
      const letterSpacing = fontSize * 0.8;
      const textWidth = this.finalText.length * letterSpacing;
      const startX = (containerRect.width - textWidth) / 2;
      const startY = containerRect.height / 2;
      this.particles.forEach((particle, index) => {
        if (index < this.finalText.length) {
          const targetX = startX + index * letterSpacing;
          const targetY = startY + (Math.random() - 0.5) * (fontSize / 2);
          Object.assign(particle.element.style, {
            transform: `translate(${targetX}px, ${targetY}px)`,
            opacity: "1",
          });
          particle.element.textContent = this.finalText[index];
        } else {
          particle.element.style.opacity = "0";
        }
      });
    }
    startAnimation() {
      cancelAnimationFrame(this.animationFrame);
      this.createParticles();
      this.animateParticles();
      setTimeout(() => {
        cancelAnimationFrame(this.animationFrame);
        this.reformText();
      }, 2000);
    }
    handleResize() {
      const containerRect = this.container.getBoundingClientRect();
      this.particles.forEach((particle) => {
        particle.x = Math.random() * containerRect.width;
        particle.y = Math.random() * containerRect.height;
      });
      cancelAnimationFrame(this.animationFrame);
      this.animateParticles();
    }
    addEventListeners() {
      this.container.addEventListener("click", this.startAnimation.bind(this));
      window.addEventListener("resize", this.handleResize.bind(this));
    }
  }
  document.addEventListener("DOMContentLoaded", () => {
    new ParticleTextAnimation(
      "text-container",
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "HELLO EVERYONE"
    );
  });
</script>
