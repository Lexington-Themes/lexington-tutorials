---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import TutorialBanner from "@/components/global/TutorialBanner.astro";
import {
  generateArticleSchema,
  generateBreadcrumbSchema,
  generateHowToSchema,
} from "@/utils/jsonLd";

// SEO Configuration
const seoConfig = {
  title: "Create Js Particle Text with JavaScript",
  description: "Learn to build js particle text components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
  canonical: "/js-particle-text",
  jsonLd: [
    generateArticleSchema({
      title: "Create Js Particle Text with JavaScript",
      description: "Learn to build js particle text components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
      url: "/js-particle-text",
      datePublished: "2025-10-01T06:22:29.079Z",
      dateModified: "2025-10-01T06:22:29.079Z",
      keywords: ["Tailwind CSS","JavaScript","Vanilla JS","Js Particle Text","Tutorial","Web Development"],
    }),
    generateBreadcrumbSchema([
      { name: "Home", url: "/" },
      { name: "Create Js Particle Text with JavaScript", url: "/js-particle-text" },
    ]),
    generateHowToSchema({
      name: "Create Js Particle Text with JavaScript",
      description: "Learn to build js particle text components using JavaScript and Tailwind CSS. Includes responsive design and modern styling.",
      totalTime: "PT20M",
      steps: [
            {
                  "name": "Set up HTML structure",
                  "text": "Create the base js particle text container and elements"
            },
            {
                  "name": "Add JavaScript interactivity",
                  "text": "Initialize JavaScript to handle component state and interactions"
            },
            {
                  "name": "Style with Tailwind CSS",
                  "text": "Apply utility classes for responsive layout and modern design"
            },
            {
                  "name": "Add accessibility features",
                  "text": "Implement ARIA attributes and keyboard navigation"
            },
            {
                  "name": "Test the component",
                  "text": "Verify functionality across different browsers and devices"
            }
      ],
    }),
  ],
};
---
<BaseLayout seo={seoConfig}>
  <section>
  <h1 class="sr-only">Create Js Particle Text with JavaScript</h1>

    <!-- Starts links to tutorial -->
    <TutorialBanner
      tutorialUrl="https://lexingtonthemes.com/tutorials/how-to-create-particle-text-effect-with-tailwind-css-and-javascript"
      codeUrl="https://github.com/Lexington-Themes/lexington-tutorials/blob/main/src/pages/js-particle-text/index.astro"
    />
    <Wrapper class="py-24 lg:py-62">
      <div id="text-container" class="flex items-center h-96 lg:h-24"></div>
    </Wrapper>
  </section>
 
</BaseLayout>
<script type="module">
  class ParticleTextAnimation {
    constructor(containerId, initialText, finalText, particleCount = 500) {
      this.container = document.getElementById(containerId);
      this.initialText = initialText;
      this.finalText = finalText;
      this.particleCount = particleCount;
      this.particles = [];
      this.animationFrame = null;
      this.init();
    }
    init() {
      this.createParticles();
      this.addEventListeners();
      this.startAnimation();
    }
    createParticles() {
      const fragment = document.createDocumentFragment();
      const containerRect = this.container.getBoundingClientRect();
      for (let i = 0; i < this.particleCount; i++) {
        const particle = document.createElement("span");
        particle.textContent = this.getRandomChar();
        particle.className =
          "absolute opacity-0 transition-all duration-1000 ease-out";
        fragment.appendChild(particle);
        this.particles.push({
          element: particle,
          x: Math.random() * containerRect.width,
          y: Math.random() * containerRect.height,
          speedX: Math.random() * 2 - 1,
          speedY: Math.random() * 2 - 1,
        });
      }
      this.container.appendChild(fragment);
    }
    getRandomChar() {
      return this.initialText[
        Math.floor(Math.random() * this.initialText.length)
      ];
    }
    animateParticles() {
      const containerRect = this.container.getBoundingClientRect();
      this.particles.forEach((particle) => {
        particle.x += particle.speedX;
        particle.y += particle.speedY;
        if (particle.x < 0 || particle.x > containerRect.width)
          particle.speedX *= -1;
        if (particle.y < 0 || particle.y > containerRect.height)
          particle.speedY *= -1;
        Object.assign(particle.element.style, {
          transform: `translate(${particle.x}px, ${particle.y}px)`,
          opacity: "1",
        });
      });
      this.animationFrame = requestAnimationFrame(
        this.animateParticles.bind(this)
      );
    }
    reformText() {
      const containerRect = this.container.getBoundingClientRect();
      const fontSize = window.innerWidth < 1024 ? 16 : 54;
      const letterSpacing = fontSize * 0.8;
      const textWidth = this.finalText.length * letterSpacing;
      const startX = (containerRect.width - textWidth) / 2;
      const startY = containerRect.height / 2;
      this.particles.forEach((particle, index) => {
        if (index < this.finalText.length) {
          const targetX = startX + index * letterSpacing;
          const targetY = startY + (Math.random() - 0.5) * (fontSize / 2);
          Object.assign(particle.element.style, {
            transform: `translate(${targetX}px, ${targetY}px)`,
            opacity: "1",
          });
          particle.element.textContent = this.finalText[index];
        } else {
          particle.element.style.opacity = "0";
        }
      });
    }
    startAnimation() {
      cancelAnimationFrame(this.animationFrame);
      this.createParticles();
      this.animateParticles();
      setTimeout(() => {
        cancelAnimationFrame(this.animationFrame);
        this.reformText();
      }, 2000);
    }
    handleResize() {
      const containerRect = this.container.getBoundingClientRect();
      this.particles.forEach((particle) => {
        particle.x = Math.random() * containerRect.width;
        particle.y = Math.random() * containerRect.height;
      });
      cancelAnimationFrame(this.animationFrame);
      this.animateParticles();
    }
    addEventListeners() {
      this.container.addEventListener("click", this.startAnimation.bind(this));
      window.addEventListener("resize", this.handleResize.bind(this));
    }
  }
  document.addEventListener("DOMContentLoaded", () => {
    new ParticleTextAnimation(
      "text-container",
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "HELLO EVERYONE"
    );
  });
</script>
